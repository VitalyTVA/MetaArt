@page "/"
@using System.Reflection
@inject HttpClient Http
<style>
div.scrollable {
  height: 1000px;
  overflow: auto;
}
</style>
<PageTitle>MetaArt in Blazor</PageTitle>

<h1><a href="https://github.com/VitalyTVA/MetaArt/" target="_blank">MetaArt</a> web viewer</h1>
<div style="width: 100%; overflow: hidden;">
    <div style="width: 400px; float: left;">
        @if(groups == null) {
            <p><em>Loading...</em></p>
        } else {
            <h3>@selectedGroup.Key</h3>
            <h3>@(selectedSkecth?.Name ?? "Run Sketch")</h3>
            <div>
                <tr>
                    @foreach(var group in groups) {
                        <td><button @onclick="@(e => SelectGroup(group))">@group.Key</button></td>
                    }
                </tr>
            </div>
            <div class="scrollable">
                <table class="table">
                    <tbody>
                        @foreach(var sketch in selectedGroup) {
                            <tr>
                                <td><button @onclick="@(e => Run(sketch))">Run</button></td>
                                <td>@sketch.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
    <div style="margin-left: 420px;">
        <div class="container">
            <div class="row">
                <div class="col border rounded p-2 canvas-container">
                    <SKGLView @ref=view OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="true"
                              style="@viewStyle" onmousedown="@OnMouseDown" onmousemove="@OnMouseMove" onmouseout="@OnMouseOut" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    SKGLView view = null!;
    IGrouping<string, SketchDisplayInfo>[] groups = null!;
    IGrouping<string, SketchDisplayInfo> selectedGroup = null!;
    SketchDisplayInfo selectedSkecth = null!;

    protected override async Task OnInitializedAsync()
    {
        var sketches = await Task.Run(() => SketchDisplayInfo.LoadSketches(typeof(Sketches).Assembly));
        groups = sketches.GroupBy(x => x.Category).ToArray();
        selectedGroup = groups.First();
    }

    Painter painter = null!;
    string viewStyle = "height:1080px; width:1920px;";
    void Run(SketchDisplayInfo info) {
        selectedSkecth = info;
        setUp = false;
        draw = null;
        drawn = false;
        draw?.Dispose();
        queue.Clear();
        first = true;
        pos = null;
        viewStyle = "height:1080px; width:1920px;";
        StateHasChanged();
        painter = new Painter(info.Type);

    }
    void SelectGroup(IGrouping<string, SketchDisplayInfo> group) {
        selectedGroup = group;
    }

    void OnMouseDown(MouseEventArgs e) {
        var pos = new Point((float)e.OffsetX, (float)e.OffsetY);
        queue.Enqueue(() => {
            painter.MousePressed(pos);
        });
    }
    Point? pos;
    void OnMouseMove(MouseEventArgs e) {
        pos = new Point((float)e.OffsetX, (float)e.OffsetY);
        var val = pos.Value;
        queue.Enqueue(() => {
            painter.MouseMoved(val);
        });
    }
    void OnMouseOut(MouseEventArgs e) {
        pos = null;
    }

    bool setUp = false;
    SKImage? draw;
    bool drawn = false;

    Queue<Action> queue = new();
    bool first = true;
    void OnPaintSurface(SKPaintGLSurfaceEventArgs e)
    {
        if(first) {
            e.Surface.Canvas.Clear();
            viewStyle = "height:1080px; width:1920px;";
            StateHasChanged();
            first = false;
            return;
        }
        if(painter == null) return;

        if(draw != null) {
            e.Surface.Canvas.DrawImage(draw, 0, 0);
            if((painter.NoLoop && drawn) || !painter.HasDraw)
                return;
        }
        painter.SKSurface = e.Surface;
        if(!setUp) {
            painter.Setup();
            //ElementReference canvasRef = (ElementReference)view.GetType().GetField("htmlCanvas", BindingFlags.NonPublic | BindingFlags.Instance)!.GetValue(view)!;
            //SetLocation(ownerLocation);
            if(draw != null)
                draw.Dispose();
            draw = e.Surface.Snapshot();

            setUp = true;
            viewStyle = $"height:{painter.Height}px; width:{painter.Width}px;";
            StateHasChanged();
            //view.Invalidate();
        } else {
            while(queue.Count > 0) {
                queue.Dequeue().Invoke();
            }
            //var mouse = skglControl1.PointToClient(MousePosition);
            //bool over = new Rectangle(System.Drawing.Point.Empty, skglControl1.Size).Contains(mouse);
            var mouse = pos;
            //bool over = false;
            painter.Draw(pos);
            drawn = true;
            if(draw != null)
                draw.Dispose();
            draw = e.Surface.Snapshot();
            //}
            //if(save) {
            //    using(SKImage image = e.Surface.Snapshot())
            //    using(SKData data = image.Encode(SKEncodedImageFormat.Png, 100)) {
            //        File.WriteAllBytes("c:\\temp\\1.png", data.ToArray());
            //    }
            //    save = false;
            //}
            //if(!painter.NoLoop)
            //    view.Invalidate();
        }
    }
}
