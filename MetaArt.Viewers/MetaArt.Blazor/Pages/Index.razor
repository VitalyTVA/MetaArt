@page "/"

@using System.Reflection
@inject HttpClient Http
@inject IJSRuntime JS
<style>
div.scrollable {
  height: 1000px;
  overflow: auto;
}
</style>
<PageTitle>MetaArt in Blazor</PageTitle>

<h1><a href="https://github.com/VitalyTVA/MetaArt/" target="_blank">MetaArt</a> web viewer</h1>
<div style="width: 100%; overflow: hidden;">
    <div style="width: 400px; float: left;">
        @if(groups == null) {
            <p><em>Loading...</em></p>
        } else {
            <h3>@selectedGroup.Key</h3>
            <h3>@(selectedSkecth?.Name ?? "Run Sketch")</h3>
            <div>
                @foreach(var chunk in groups.Chunk(3)) {
                    <tr>
                        @foreach(var group in chunk) {
                            <td><button @onclick="@(e => SelectGroup(group))">@group.Key</button></td>
                        }
                    </tr>
                }
            </div>
            <div class="scrollable">
                <table class="table">
                    <tbody>
                        @foreach(var sketch in selectedGroup) {
                            <tr>
                                <td><button @onclick="@(e => Run(sketch))">Run</button></td>
                                <td>@sketch.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
    <div style="margin-left: 420px;">
        <div class="container">
            <div class="row">
                <div class="col border rounded p-2 canvas-container" tabindex="0" onkeypress="@OnKeyPress" @ref="@viewContaner">
                    <SKGLView @ref=view OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="true"
                              style="@viewStyle" onmousedown="@OnMouseDown" onmouseup="@OnMouseUp" onmousemove="@OnMouseMove" onmouseout="@OnMouseOut" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    SKGLView view = null!;
    ElementReference viewContaner;
    IGrouping<string, SketchDisplayInfo>[] groups = null!;
    IGrouping<string, SketchDisplayInfo> selectedGroup = null!;
    SketchDisplayInfo selectedSkecth = null!;

    protected override async Task OnInitializedAsync()
    {
        var sketches = await Task.Run(() => {
            return new[] {
                typeof(Meta3DSketches),
                typeof(Sketches),
                typeof(SkiaSketch),
            }.SelectMany(x => SketchDisplayInfo.LoadSketches(x.Assembly)).ToList();
        });
        groups = sketches.GroupBy(x => x.Category).ToArray();
        selectedGroup = groups.First();
    }

    Painter painter = null!;
    string viewStyle = "height:1080px; width:1920px;";
    void Run(SketchDisplayInfo info) {
        JS.InvokeVoidAsync("SetFocusToElement", viewContaner);

        painter?.Dispose();
        selectedSkecth = info;
        //viewStyle = "height:1080px; width:1920px;";
        StateHasChanged();
        var values = new Dictionary<string, string?>();
        painter = new Painter(
            info.Type,
            info.Parameters,
            () => { },
            _ => {
            },
            displayDensity: 1,
            deviceType: DeviceType.Desktop,
            createSoundFile: _ => new BlazorSoundFile(),
            getValue: name => values.TryGetValue(name, out var value) ? value : null,
            setValue: (name, value) => values[name] = value
        );
        painter.Setup();
        viewStyle = $"height:{painter!.Height}px; width:{painter!.Width}px;";
        StateHasChanged();
    }
    class BlazorSoundFile : SoundFile {
        public override void play() {
            throw new NotImplementedException();
        }
    }
    void SelectGroup(IGrouping<string, SketchDisplayInfo> group) {
        selectedGroup = group;
    }

    void OnMouseDown(MouseEventArgs e) => painter.OnMouseDown((float)e.OffsetX, (float)e.OffsetY, true);
    void OnMouseUp(MouseEventArgs e) => painter.OnMouseUp((float)e.OffsetX, (float)e.OffsetY);

    void OnMouseMove(MouseEventArgs e) => painter.OnMouseOver((float)e.OffsetX, (float)e.OffsetY);

    void OnMouseOut(MouseEventArgs e) => painter.OnMouseLeave();

    void OnKeyPress(KeyboardEventArgs e) => painter.OnKeyPress(e.Key[0]);

    void OnPaintSurface(SKPaintGLSurfaceEventArgs e) {
        if(painter == null) return;

        painter.PaintSurface(e.Surface);
    }
}
